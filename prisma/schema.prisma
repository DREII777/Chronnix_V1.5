generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkerStatus {
  SALARIE      @map("salarié")
  INDEPENDANT  @map("indépendant")
  ASSOCIE      @map("associé")
}

enum DocumentKind {
  CAREER_ATTESTATION
  CI
  VCA
  OTHER
}

enum AdditionalCostUnit {
  HOUR
  DAY
}

model ClientProfile {
  id          Int      @id @default(autoincrement())
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   Int
  name        String
  slug        String   @unique
  contactName String?
  email       String?
  phone       String?
  address     String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([accountId])
}

enum TimeEntryStatus {
  WORKED @map("worked")
  ABSENT @map("absent")
}

model Worker {
  id              Int             @id @default(autoincrement())
  account         Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId       Int
  firstName       String
  lastName        String
  email           String?
  phone           String?
  nationalId      String?
  status          WorkerStatus
  vatNumber       String?
  payRate         Decimal?        @db.Decimal(10, 2)
  chargesPct      Decimal?        @db.Decimal(5, 2)
  includeInExport Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  documents       Document[]
  additionalCosts WorkerAdditionalCost[]
  teamMemberships TeamMember[]
  assignments     ProjectWorker[]
  timeEntries     TimeEntry[]

  @@index([accountId])
}

model Document {
  id         Int          @id @default(autoincrement())
  worker     Worker       @relation(fields: [workerId], references: [id])
  workerId   Int
  kind       DocumentKind
  label      String?
  fileName   String
  fileUrl    String
  validUntil DateTime?
  createdAt  DateTime     @default(now())

  @@index([workerId, kind])
}

model WorkerAdditionalCost {
  id        Int                @id @default(autoincrement())
  worker    Worker             @relation(fields: [workerId], references: [id], onDelete: Cascade)
  workerId  Int
  label     String
  unit      AdditionalCostUnit
  amount    Decimal            @db.Decimal(10, 2)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([workerId])
}

model Team {
  id          Int          @id @default(autoincrement())
  account     Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   Int
  name        String
  members     TeamMember[]

  @@index([accountId])
}

model TeamMember {
  id       Int     @id @default(autoincrement())
  team     Team    @relation(fields: [teamId], references: [id])
  teamId   Int
  worker   Worker  @relation(fields: [workerId], references: [id])
  workerId Int
  role     String

  @@unique([teamId, workerId])
}

model Project {
  id            Int             @id @default(autoincrement())
  account       Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId     Int
  name          String
  clientName    String?
  billingRate   Decimal?        @db.Decimal(10, 2)
  defaultHours  Decimal?        @db.Decimal(5, 2)
  archived      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  assignments   ProjectWorker[]
  timeEntries   TimeEntry[]

  @@index([accountId])
}

model ProjectWorker {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  worker    Worker   @relation(fields: [workerId], references: [id])
  workerId  Int

  @@unique([projectId, workerId])
}

model TimeEntry {
  id        Int             @id @default(autoincrement())
  project   Project         @relation(fields: [projectId], references: [id])
  projectId Int
  worker    Worker          @relation(fields: [workerId], references: [id])
  workerId  Int
  date      DateTime        @db.Date
  hours     Decimal         @db.Decimal(5, 2)
  status    TimeEntryStatus
  note      String?
  startTime String?
  endTime   String?

  @@unique([projectId, workerId, date])
}

model CompanySettings {
  id           Int      @id @default(autoincrement())
  accountId    Int      @unique
  account      Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  bceFileName  String?
  bceFileUrl   String?
  validUntil   DateTime?
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Account {
  id             Int               @id @default(autoincrement())
  name           String
  slug           String            @unique
  primaryEmail   String?
  phone          String?
  addressLine1   String?
  addressLine2   String?
  postalCode     String?
  city           String?
  country        String?
  locale         String?          @default("fr-BE")
  timezone       String?          @default("Europe/Brussels")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  companySettings CompanySettings?
  users          User[]
  workers        Worker[]
  teams          Team[]
  projects       Project[]
  clients        ClientProfile[]
  onboardedAt    DateTime?
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  displayName String?
  account     Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   Int
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sessions    UserSession[]
  authCodes   AuthCode[]
}

model AuthCode {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  code       String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  consumedAt DateTime?

  @@index([userId, code])
}

model UserSession {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([userId])
}
